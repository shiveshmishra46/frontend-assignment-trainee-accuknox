{"ast":null,"code":"import create from 'zustand';\nconst initialData = {\n  categories: [{\n    id: 'cspm',\n    name: 'CSPM Executive dashboard',\n    widgets: ['w1', 'w2', 'w3', 'w4']\n  }],\n  widgets: {\n    w1: {\n      id: 'w1',\n      name: 'Assets Summary',\n      text: 'Assets across regions'\n    },\n    w2: {\n      id: 'w2',\n      name: 'Compliance Score',\n      text: 'Compliance across benchmarks'\n    },\n    w3: {\n      id: 'w3',\n      name: 'Alerts Feed',\n      text: 'Latest security alerts and counts'\n    },\n    w4: {\n      id: 'w4',\n      name: 'Risk Trend',\n      text: 'Risk score trend'\n    }\n  }\n};\nexport const useStore = create((set, get) => ({\n  ...initialData,\n  addWidgetGlobal: widget => {\n    const widgets = {\n      ...get().widgets\n    };\n    widgets[widget.id] = widget;\n    set({\n      widgets\n    });\n  },\n  addWidgetToCategory: (categoryId, widgetId) => {\n    const categories = get().categories.map(c => c.id === categoryId ? {\n      ...c,\n      widgets: [...c.widgets, widgetId]\n    } : c);\n    set({\n      categories\n    });\n  },\n  removeWidgetFromCategory: (categoryId, widgetId) => {\n    const categories = get().categories.map(c => c.id === categoryId ? {\n      ...c,\n      widgets: c.widgets.filter(w => w !== widgetId)\n    } : c);\n    set({\n      categories\n    });\n  },\n  addCategory: cat => {\n    set(state => ({\n      categories: [...state.categories, cat]\n    }));\n  },\n  toggleWidgetMembership: (categoryId, widgetId, include) => {\n    if (include) get().addWidgetToCategory(categoryId, widgetId);else get().removeWidgetFromCategory(categoryId, widgetId);\n  },\n  removeWidgetCompletely: widgetId => {\n    const widgets = {\n      ...get().widgets\n    };\n    delete widgets[widgetId];\n    const categories = get().categories.map(c => ({\n      ...c,\n      widgets: c.widgets.filter(w => w !== widgetId)\n    }));\n    set({\n      widgets,\n      categories\n    });\n  }\n}));","map":{"version":3,"names":["create","initialData","categories","id","name","widgets","w1","text","w2","w3","w4","useStore","set","get","addWidgetGlobal","widget","addWidgetToCategory","categoryId","widgetId","map","c","removeWidgetFromCategory","filter","w","addCategory","cat","state","toggleWidgetMembership","include","removeWidgetCompletely"],"sources":["/Users/shiveshmishra/Downloads/frontend-dashboard-final-addwidget/src/store.js"],"sourcesContent":["\nimport create from 'zustand';\n\nconst initialData = {\n  categories: [\n    { id: 'cspm', name: 'CSPM Executive dashboard', widgets: ['w1','w2','w3','w4'] }\n  ],\n  widgets: {\n    w1: { id:'w1', name:'Assets Summary', text:'Assets across regions' },\n    w2: { id:'w2', name:'Compliance Score', text:'Compliance across benchmarks' },\n    w3: { id:'w3', name:'Alerts Feed', text:'Latest security alerts and counts' },\n    w4: { id:'w4', name:'Risk Trend', text:'Risk score trend' },\n  }\n};\n\nexport const useStore = create((set, get) => ({\n  ...initialData,\n  addWidgetGlobal: (widget) => {\n    const widgets = {...get().widgets};\n    widgets[widget.id] = widget;\n    set({ widgets });\n  },\n  addWidgetToCategory: (categoryId, widgetId) => {\n    const categories = get().categories.map(c => c.id === categoryId ? {...c, widgets: [...c.widgets, widgetId]} : c);\n    set({ categories });\n  },\n  removeWidgetFromCategory: (categoryId, widgetId) => {\n    const categories = get().categories.map(c => c.id === categoryId ? {...c, widgets: c.widgets.filter(w=>w!==widgetId)} : c);\n    set({ categories });\n  },\n  addCategory: (cat) => {\n    set(state => ({ categories: [...state.categories, cat] }));\n  },\n  toggleWidgetMembership: (categoryId, widgetId, include) => {\n    if(include) get().addWidgetToCategory(categoryId, widgetId);\n    else get().removeWidgetFromCategory(categoryId, widgetId);\n  },\n  removeWidgetCompletely: (widgetId) => {\n    const widgets = {...get().widgets};\n    delete widgets[widgetId];\n    const categories = get().categories.map(c => ({...c, widgets: c.widgets.filter(w=>w!==widgetId)}));\n    set({ widgets, categories });\n  }\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}